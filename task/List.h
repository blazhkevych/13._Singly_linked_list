#pragma once

// Элемент данных.
struct Element
{
	// Данные.
	char data;
	// Адрес следующего элемента списка.
	Element* next;
};

// Односвязный список.
class List
{
	// Адрес головного элемента списка.
	Element* m_head;
	// Количество элементов списка.
	int m_count;

public:
	// Конструктор.
	List();

	// Конструктор копирования.
	List(const List& obj);

	// Перегруженный оператор присваивания с копированием.
	List& operator = (const List& obj);

	// Деструктор.
	~List();

	// Добавление элемента в список.
	// (Новый элемент становится головным)
	void Add(char data);

	// Удаление элемента списка.
	// (Удаляется головной элемент)
	void Del();

	// Удаление всех элементов списка.
	void DelAll();

	// Распечатка содержимого списка.
	// (Распечатка начинается с головного элемента)
	void Print() const;

	// Получение количества элементов, находящихся в списке.
	int GetCount() const;

	// Вставка элемента в заданную позицию.
	void InsertByPosition(char data, int position);

	// Удаление элемента по заданной позиции.
	void RemoveByPosition(int position);

	// Поиск заданного элемента по ключу(функция возвращает позицию найденного элемента в
	// случае успеха или - 1 в случае неудачи).
	int Find(char key) const;
};